<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
       		             http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.qkn" />
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <!-- 阿里 druid 数据库连接池 -->
    <bean id="dataSource"   class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
        <!-- ur地址 -->
        <property name="url"><value>${jdbc.url}</value></property>
        <!-- 用户名 -->
        <property name="username"><value>${jdbc.username}</value></property>
        <!-- 密码 -->
        <property name="password" ><value>${jdbc.password}</value></property>
        <!-- 密码 -->
        <property name="filters" ><value>${jdbc.filters}</value></property>
        <!-- 初始化连接数量 -->
        <property name="initialSize" ><value>${jdbc.initialSize}</value></property>
        <property name="minIdle" ><value>${jdbc.minIdle}</value></property>
        <!-- 最大并发连接数 -->
        <property name="maxActive"><value>${jdbc.maxActive}</value> </property>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait"><value>${jdbc.maxWait}</value> </property>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"><value>${jdbc.timeBetweenEvictionRunsMillis}</value> </property>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"><value>${jdbc.minEvictableIdleTimeMillis}</value> </property>
        <!--   用来检测连接是否有效的sql，要求是一个查询语句 -->
        <property name="validationQuery"><value>${jdbc.validationQuery}</value> </property>

        <property name="testOnBorrow"><value>${jdbc.testOnBorrow}</value></property>
        <property name="testOnReturn"><value>${jdbc.testOnReturn}</value></property>
        <!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle"><value>${jdbc.testWhileIdle}</value> </property>
        <!-- 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说10-->
        <property name="maxOpenPreparedStatements"><value>${jdbc.maxOpenPreparedStatements}</value> </property>
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned"><value>${jdbc.removeAbandoned}</value> </property>
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout"><value>${jdbc.removeAbandonedTimeout}</value> </property>
        <!--关闭 abanded 连接时输出错误日志-->
        <property name="logAbandoned"><value>${jdbc.logAbandoned}</value> </property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/qkn/portal/mapping/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qkn.portal.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 事物管理模板 -->
    <bean id="transactionTemplate"   class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 定义个通知，指定事务管理器 -->
    <tx:advice id="readTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="*remove*" propagation="REQUIRED"   rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
</beans>